@import 'true';
@import './flex';

@include describe('The flex mixin') {
  $theme-flex: (
    initial: 0 1 auto,
    1: 1 1 0%,
    auto: auto,
    none: none,
  );
  $screens: (
    sm: 640px,
  );
  $variants: responsive hover focus;
  $separator: '_';
  $prefix: '';

  @include it('should output flex stylesheet correctly') {
    @include assert {
      @include output {
        @include flex($prefix, $theme-flex, $variants, $separator, $screens);
      }
      @include expect {
        .flex-initial {
          flex: 0 1 auto;
        }
        @media (min-width: 640px) {
          .sm_flex-initial {
            flex: 0 1 auto;
          }
          .sm_hover_flex-initial:hover {
            flex: 0 1 auto;
          }
          .sm_focus_flex-initial:focus {
            flex: 0 1 auto;
          }
        }
        .hover_flex-initial:hover {
          flex: 0 1 auto;
        }
        .focus_flex-initial:focus {
          flex: 0 1 auto;
        }
        .flex-1 {
          flex: 1 1 0%;
        }
        @media (min-width: 640px) {
          .sm_flex-1 {
            flex: 1 1 0%;
          }
          .sm_hover_flex-1:hover {
            flex: 1 1 0%;
          }
          .sm_focus_flex-1:focus {
            flex: 1 1 0%;
          }
        }
        .hover_flex-1:hover {
          flex: 1 1 0%;
        }
        .focus_flex-1:focus {
          flex: 1 1 0%;
        }
        .flex-auto {
          flex: auto;
        }
        @media (min-width: 640px) {
          .sm_flex-auto {
            flex: auto;
          }
          .sm_hover_flex-auto:hover {
            flex: auto;
          }
          .sm_focus_flex-auto:focus {
            flex: auto;
          }
        }
        .hover_flex-auto:hover {
          flex: auto;
        }
        .focus_flex-auto:focus {
          flex: auto;
        }
        .flex-none {
          flex: none;
        }
        @media (min-width: 640px) {
          .sm_flex-none {
            flex: none;
          }
          .sm_hover_flex-none:hover {
            flex: none;
          }
          .sm_focus_flex-none:focus {
            flex: none;
          }
        }
        .hover_flex-none:hover {
          flex: none;
        }
        .focus_flex-none:focus {
          flex: none;
        }
      }
    }
  }
}

@include describe('The flex-direction mixin') {
  $screens: (
    sm: 640px,
  );
  $variants: responsive hover focus;
  $separator: '_';
  $prefix: '';

  @include it('should output flex-direction stylesheet correctly') {
    @include assert {
      @include output {
        @include flex-direction($prefix, $variants, $separator, $screens);
      }
      @include expect {
        .flex-row {
          flex-direction: row;
        }
        @media (min-width: 640px) {
          .sm_flex-row {
            flex-direction: row;
          }
          .sm_hover_flex-row:hover {
            flex-direction: row;
          }
          .sm_focus_flex-row:focus {
            flex-direction: row;
          }
        }
        .hover_flex-row:hover {
          flex-direction: row;
        }
        .focus_flex-row:focus {
          flex-direction: row;
        }
        .flex-row-reverse {
          flex-direction: row-reverse;
        }
        @media (min-width: 640px) {
          .sm_flex-row-reverse {
            flex-direction: row-reverse;
          }
          .sm_hover_flex-row-reverse:hover {
            flex-direction: row-reverse;
          }
          .sm_focus_flex-row-reverse:focus {
            flex-direction: row-reverse;
          }
        }
        .hover_flex-row-reverse:hover {
          flex-direction: row-reverse;
        }
        .focus_flex-row-reverse:focus {
          flex-direction: row-reverse;
        }
        .flex-col {
          flex-direction: column;
        }
        @media (min-width: 640px) {
          .sm_flex-col {
            flex-direction: column;
          }
          .sm_hover_flex-col:hover {
            flex-direction: column;
          }
          .sm_focus_flex-col:focus {
            flex-direction: column;
          }
        }
        .hover_flex-col:hover {
          flex-direction: column;
        }
        .focus_flex-col:focus {
          flex-direction: column;
        }
        .flex-col-reverse {
          flex-direction: column-reverse;
        }
        @media (min-width: 640px) {
          .sm_flex-col-reverse {
            flex-direction: column-reverse;
          }
          .sm_hover_flex-col-reverse:hover {
            flex-direction: column-reverse;
          }
          .sm_focus_flex-col-reverse:focus {
            flex-direction: column-reverse;
          }
        }
        .hover_flex-col-reverse:hover {
          flex-direction: column-reverse;
        }
        .focus_flex-col-reverse:focus {
          flex-direction: column-reverse;
        }
      }
    }
  }
}

@include describe('The flex-wrap mixin') {
  $screens: (
    sm: 640px,
  );
  $variants: responsive hover focus;
  $separator: '_';
  $prefix: '';

  @include it('should output flex-wrap stylesheet correctly') {
    @include assert {
      @include output {
        @include flex-wrap($prefix, $variants, $separator, $screens);
      }
      @include expect {
        .flex-no-wrap {
          flex-wrap: nowrap;
        }
        @media (min-width: 640px) {
          .sm_flex-no-wrap {
            flex-wrap: nowrap;
          }
          .sm_hover_flex-no-wrap:hover {
            flex-wrap: nowrap;
          }
          .sm_focus_flex-no-wrap:focus {
            flex-wrap: nowrap;
          }
        }
        .hover_flex-no-wrap:hover {
          flex-wrap: nowrap;
        }
        .focus_flex-no-wrap:focus {
          flex-wrap: nowrap;
        }
        .flex-wrap {
          flex-wrap: wrap;
        }
        @media (min-width: 640px) {
          .sm_flex-wrap {
            flex-wrap: wrap;
          }
          .sm_hover_flex-wrap:hover {
            flex-wrap: wrap;
          }
          .sm_focus_flex-wrap:focus {
            flex-wrap: wrap;
          }
        }
        .hover_flex-wrap:hover {
          flex-wrap: wrap;
        }
        .focus_flex-wrap:focus {
          flex-wrap: wrap;
        }
        .flex-wrap-reverse {
          flex-wrap: wrap-reverse;
        }
        @media (min-width: 640px) {
          .sm_flex-wrap-reverse {
            flex-wrap: wrap-reverse;
          }
          .sm_hover_flex-wrap-reverse:hover {
            flex-wrap: wrap-reverse;
          }
          .sm_focus_flex-wrap-reverse:focus {
            flex-wrap: wrap-reverse;
          }
        }
        .hover_flex-wrap-reverse:hover {
          flex-wrap: wrap-reverse;
        }
        .focus_flex-wrap-reverse:focus {
          flex-wrap: wrap-reverse;
        }
      }
    }
  }
}

@include describe('The flex-grow mixin') {
  $theme-flex-grow: (
    0: 0,
    default: 1,
  );
  $screens: (
    sm: 640px,
  );
  $variants: responsive hover focus;
  $separator: '_';
  $prefix: '';

  @include it('should output flex-grow stylesheet correctly') {
    @include assert {
      @include output {
        @include flex-grow($prefix, $theme-flex-grow, $variants, $separator, $screens);
      }
      @include expect {
        .flex-grow-0 {
          flex-grow: 0;
        }
        @media (min-width: 640px) {
          .sm_flex-grow-0 {
            flex-grow: 0;
          }
          .sm_hover_flex-grow-0:hover {
            flex-grow: 0;
          }
          .sm_focus_flex-grow-0:focus {
            flex-grow: 0;
          }
        }
        .hover_flex-grow-0:hover {
          flex-grow: 0;
        }
        .focus_flex-grow-0:focus {
          flex-grow: 0;
        }
        .flex-grow {
          flex-grow: 1;
        }
        @media (min-width: 640px) {
          .sm_flex-grow {
            flex-grow: 1;
          }
          .sm_hover_flex-grow:hover {
            flex-grow: 1;
          }
          .sm_focus_flex-grow:focus {
            flex-grow: 1;
          }
        }
        .hover_flex-grow:hover {
          flex-grow: 1;
        }
        .focus_flex-grow:focus {
          flex-grow: 1;
        }
      }
    }
  }
}

@include describe('The flex-shrink mixin') {
  $theme-flex-shrink: (
    0: 0,
    default: 1,
  );
  $screens: (
    sm: 640px,
  );
  $variants: responsive hover focus;
  $separator: '_';
  $prefix: '';

  @include it('should output flex-shrink stylesheet correctly') {
    @include assert {
      @include output {
        @include flex-shrink($prefix, $theme-flex-shrink, $variants, $separator, $screens);
      }
      @include expect {
        .flex-shrink-0 {
          flex-shrink: 0;
        }
        @media (min-width: 640px) {
          .sm_flex-shrink-0 {
            flex-shrink: 0;
          }
          .sm_hover_flex-shrink-0:hover {
            flex-shrink: 0;
          }
          .sm_focus_flex-shrink-0:focus {
            flex-shrink: 0;
          }
        }
        .hover_flex-shrink-0:hover {
          flex-shrink: 0;
        }
        .focus_flex-shrink-0:focus {
          flex-shrink: 0;
        }
        .flex-shrink {
          flex-shrink: 1;
        }
        @media (min-width: 640px) {
          .sm_flex-shrink {
            flex-shrink: 1;
          }
          .sm_hover_flex-shrink:hover {
            flex-shrink: 1;
          }
          .sm_focus_flex-shrink:focus {
            flex-shrink: 1;
          }
        }
        .hover_flex-shrink:hover {
          flex-shrink: 1;
        }
        .focus_flex-shrink:focus {
          flex-shrink: 1;
        }
      }
    }
  }
}
